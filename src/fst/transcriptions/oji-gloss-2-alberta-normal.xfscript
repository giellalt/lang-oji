!todo:  
!   refactor noun code so that possessor person/number is just an elaboration of tags set in generic system
!   this should simplify rules, as it will just be translation of a tag when it is preceded by +N at some dist
!   make sure all references to +N tag, +V tag are necessary
!   only once this is complete should the composition section be updated

!########### -- Verbs -- ########### 
!define VTag [ [..] -> %+V || _ [%+VAI|%+VII|%+VTI|%+VTA] ] ;
define POSTrunc [ %+VAI -> %+AI ,
                  %+VII -> %+II ,
                  %+VTI -> %+TI ,
                  %+VTA -> %+TA ] ;
define IndepTag [ [..] -> %+Ind || [%+AI|%+II|%+TI|%+TA] _ ~[%+Cnj|%+Imp] ] ;

!###
!#shifting mode slot left (brings peripheral tags next to number tags)
!###

define cpPrtDub [ [..] -> %+Prt %+Dub || [%+Ind|%+Imp [%+Imm|%+Proh|%+Del] |%+Cnj] _ ?* %+Prt %+Dub ] ;
define rmPrtDub [ %+Prt %+Dub -> 0 || ~[%+Ind|%+Imp [%+Imm|%+Proh|%+Del] |%+Cnj] _ ] ;

define cpPrt [ [..] -> %+Prt || [%+Ind|%+Imp [%+Imm|%+Proh|%+Del] |%+Cnj] _ ?* %+Prt ] ;
define rmPrt [ %+Prt  -> 0 || %+V ?* ~[%+Ind|%+Imp [%+Imm|%+Proh|%+Del] |%+Cnj] _ ] ; !copy-delete only happens for verb preterites, not nouns

define cpDub [ [..] -> %+Dub || [%+Ind|%+Imp [%+Imm|%+Proh|%+Del] |%+Cnj] _ ?* %+Dub ] ;
define rmDub [ %+Dub  -> 0 || ~[%+Ind|%+Imp [%+Imm|%+Proh|%+Del] |%+Cnj] _ ] ; !no noun preterites, so no POS restriction

define NeuTag [..] -> %+Neu || [%+Ind|%+Imp [%+Imm|%+Proh|%+Del] |%+Cnj] _ ~[%+Prt|%+Dub] ;

!###
!#shifting negative slot left (brings theme sign (obj agr) next to number tags (TA only))
!###

define cpNeg [ [..] -> %+Neg || [%+Neu|%+Prt|%+Dub] _ ?* %+Neg ] ;
define rmNeg [ %+Neg -> 0 || ~[%+Neu|%+Prt|%+Dub] _ ] ;

define PosTag [ [..] -> %+Pos || [%+Neu|%+Prt|%+Dub] _ ~[%+Neg] ] ;

!###
!#Person number (to cover both nouns and verbs)
!###

define 1Pla [ %+1 %+Pl -> %+1Pl || 1%+ ?*  _ ] ; 
define 1Pl  [ %+1 %+Pl -> %+1Pl ] ; 
define rm1pre [ 1%+ -> 0 || _ ?* %+1 %+Pl ] ;
define 1Sg  [ [1%+|%+1] -> %+1Sg ] ; !this rule needs to be ordered after rm1Pla
                 
!#second persons {
define 21Pla [ %+1 %+Pl -> %+21Pl || 2%+ ?* _ ] ; 
define 21Pl [ %+2 %+1 %+Pl -> %+21Pl ] ; 

define 2Pla [ %+2 %+Pl -> %+2Pl || 2%+ ?*  _ ] ; 
define 2Pl  [ %+2 %+Pl -> %+2Pl ] ; 
define rm2pre [ 2%+ -> 0 || _  ?*  [%+1|%+2] %+Pl ] ; 
define 2Sg  [ [2%+|%+2] -> %+2Sg ] ; 
!}

!VTAs are going to be a trick (some fusion)
!need special rules for VAI third persons (where there's a suff)
!need special rules for VII obviatives (where there's a number diff)
define 3Pla [ %+2 %+Pl -> %+3Pl || 3%+ ?*  _ ] ; !3pl may be signaled by 3+ ... +2+pl (a suff that also appears with second person plurals)
define 3Pl  [ %+3 %+Pl -> %+3Pl ] ; !in TAs when a first or second person is involved, a dedicated +3+Pl marker is used with no prefix
define rm3pre [ 3%+ -> 0 || _ ?* %+3 [ %+Pl | %+4 ] ] ;
define Obv  [ %+3 %+4 -> %+4 ] ; 
define 3Sg  [ [3%+|%+3] -> %+3Sg ] ; 

!verbal passives aren't prefixed... so they will just stay as is, modulo +ThmPas
define X    [ X%+ -> %+X ] ;

!##moving (copy, remove) tags {
define cp1Sg  [ [..] -> %+1Sg  || %+1Sg  ?* _ .#.] ;
define cp2Sg  [ [..] -> %+2Sg  || %+2Sg  ?* _ .#.] ;
define cp3Sg  [ [..] -> %+3Sg  || %+3Sg  ?* _ .#.] ;
define cpX    [ [..] -> %+X    || %+X    ?* _ .#.] ;

define rmpersnum [ [%+1Sg|%+2Sg|%+3Sg|%+X] -> 0 || .#. _ ] ;

!}

echo Putting it together

read regex [
    1Pla    .o.
    21Pla   .o.
    2Pla    .o.
    3Pla    .o.
    1Pl     .o.
    2Pl     .o.
    3Pl     .o.
    rm1pre  .o.
    rm2pre  .o.
    rm3pre  .o.
    1Sg     .o.
    2Sg     .o.
    3Pl     .o.
    Obv     .o.
    3Sg     .o.
    X       .o. !this implementation is down to 16 kB from previous 70 kB
    cp1Sg   .o. !including the copy rules gets it to 120.2 kB (had been 20 mB)
    cp2Sg   .o.
    cp3Sg   .o.
    cpX     .o.
    rmpersnum
    ] ;


!########### -- Nouns -- ########### 
!define NTag [ [..] -> %+N || _ [%+NA|%+NI|%+NAD|%+NID] ] ;
define PosThmDel [ %+ThmPos -> 0 || %+N ?*  _ ] ; !can't remove everywhere, since we flag pos polarity in verbs with +Pos

!###
!#managing peripheral slot
!###

define 4toObv [ %+4 -> %+Obv || %+N ?* _ ] ; !noun specific because we use +4 in verb system
!+3+4 is obviative possessor, precludes number/obv suffs in periph slot
define SgTag [ .#. -> %+Sg .#. || %+N ?* ~[%+Obv|%+Pl|%+Loc] _ ] ; !see note above for why it is ok to fail to insert +Sg after obv pos suff.

!###
!#Moving possessor features to end
!###
!NB: extended prefix tags (+Px1Pl) are not in root.lexc, shouldn't be a problem (?)

!intended: write +Px1Pl at end of string if string starts with 1+.*+1+Pl
define Px1Pl [ [..] -> %+Px1Pl || 1%+ ?*  %+1 %+Pl ?* _ .#. ] ; !could specify leading .#. in envi, but this shouldn't be necessary (1+ is by definition string initial)
define Px1Sg [ [..] -> %+Px1Sg || 1%+ ?*  _ .#. ] ; !this rule needs to be ordered after +1+Pl is cleaned out

define Px2Pl [ [..] -> %+Px2Pl || 2%+ ?*  %+3 %+Pl ?* _ .#. ] ; 
define Px21Pl [ [..] -> %+Px21Pl || 2%+ ?*  %+1 %+Pl ?* _ .#. ] ; 
define Px2Sg  [ [..] -> %+Px2Sg || 2%+ ?*   _ .#. ] ; 

define Px3Pl [ [..] -> %+Px3Pl || 3%+ ?*  %+3 %+Pl ?* _ .#. ] ; 
define PxObv [ [..] -> %+PxObv || 3%+ ?*  %+3 %+Obv ?* _ .#. ] ; 
define Px3Sg [ [..] -> %+Px3Sg || 3%+ ?*  _ .#. ] ; 

define PxX [ [..] -> %+PxX || X%+ ?*  _ .#. ] ;

!##Cleaning (deleting) tags
!these would be prime candidates for allowing them to apply to both nouns and verbs
!intended: delete the triggering information 
!it would be nice to have sub-rules like delete "1+", delete "+Pl"
!then they could be combined into bigger rules and deployed when envi is met
!otherwise the same changes get written out several times, varying only in envi

!#1 {
define Px1Plc1 [ 1%+ -> 0 || _ ?*  %+1 %+Pl ] ; 
define Px1Plc2 [ %+1 %+Pl -> 0 || ~[ 2%+ ] ?*  _  ] ; 
!would be nice if we could have just one rule that zapped 1+ ... +1+Pl when they occurred together
!here's an attempt: (https://code.google.com/archive/p/foma/wikis/RegularExpressionReference.wiki)
!but this deletes them when they occur separately as well as when they occur together
!define Px1Plc [  1%+ ?* %+1 %+Pl -> 0 ] ; 

define Px1Sgc [ 1%+ -> 0 ] ; 
!}

!#2 {
define Px2Plc1 [ 2%+ -> 0 || _ ?*  %+3 %+Pl ] ; 
define Px2Plc2 [ %+3 %+Pl -> 0 || ~[ 3%+ ] ?*  _  ] ; 

define Px21Plc1 [ 2%+ -> 0 || _ ?*  %+1 %+Pl ] ; 
define Px21Plc2 [ %+1 %+Pl -> 0 || ~[ 1%+ ] ?*  _  ] ; 

define Px2Sgc [ 2%+ -> 0  ] ; 
!}

!#3 {
define Px3Plc1 [ 3%+ -> 0 || _  ?* %+3 %+Pl ] ; 
define Px3Plc2 [ %+3 %+Pl -> 0 || ~[ 2%+ ] ?* _  ] ; 

define PxObvc1 [ 3%+ -> 0 || _  ?* %+3 %+Obv ] ; 
define PxObvc2 [ %+3 %+Obv -> 0  ] ; 

define Px3Sgc [ 3%+ -> 0  ] ; 
!}

!#X {
define PxXc [ X%+ -> 0  ] ; 
!}

!###
!echo Putting it together
!###
!
!
!
!read regex [ 
!    !####NOUNS
!    NTag .o.
!    PosThmDel .o.
!    !##Peripheral slot
!    !SgTag, PxObv assume +4 has been changed to +Obv in all nouns
!    4toObv .o.
!    !(need to apply before possessor tags target end of string)
!    SgTag .o.
!    !##possessor tags (combine prefix info with suffix info)
!    !#first person
!    !Px1Pl .o. !move
!    !Px1Plc1 .o. !clean
!    !Px1Plc2 .o. 
!    !Px1Sg .o. !repeat for unmarked
!    !Px1Sgc .o.
!    !!#second person
!    Px2Pl .o. !move
!    Px2Plc1 .o. !clean
!    Px2Plc2 .o. 
!    Px21Pl .o. !repeat
!    Px21Plc1 .o. 
!    Px21Plc2 .o. 
!    Px2Sg .o. !repeat for unmarked
!    Px2Sgc .o.
!    !!#third person
!    !Px3Pl .o. !move
!    !Px3Plc1 .o. !clean
!    !Px3Plc2 .o. 
!    !PxObv .o. !repeat
!    !PxObvc1 .o. 
!    !PxObvc2 .o. 
!    !Px3Sg .o. !repeat for unmarked
!    !Px3Sgc .o.
!    !!#unspecified person (a passive possessor :)
!    PxX .o.
!    PxXc
!    ] ;
!
echo Saving fst

save stack oji-gloss-2-alberta-normal.fsm

! Save test cases like this in test.csv
! 1+xxxx+1Plyyyy
! 1+xxxx
! 2+xxxx+3+Plyyyy
! 2+xxxx+1+Plyyyy
! Test with
! cat test.csv | lookup -flags mbTT test.fsm

invert net
save stack test.fsm


